type AppointmentNode implements Node {
  """The ID of the object."""
  id: ID!
  user: UserType!
  appointmentDate: DateTime!
  appointmentState: AppointmentStateNode!
}

type AppointmentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AppointmentNodeEdge]!
}

"""A Relay edge containing a `AppointmentNode` and its cursor."""
type AppointmentNodeEdge {
  """The item at the end of the edge"""
  node: AppointmentNode

  """A cursor for use in pagination"""
  cursor: String!
}

type AppointmentStateNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  appointments(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection!
}

type AppointmentStateNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AppointmentStateNodeEdge]!
}

"""A Relay edge containing a `AppointmentStateNode` and its cursor."""
type AppointmentStateNodeEdge {
  """The item at the end of the edge"""
  node: AppointmentStateNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CreateAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

type CreateUser {
  user: UserType
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""The project root mutation definition"""
type Mutation {
  createUser(email: String!, password: String!, username: String!): CreateUser
  createAppointmentState(name: String!): CreateAppointmentState
  updateAppointmentState(id: String!, name: String!): UpdateAppointmentState
  deleteAppointmentState(id: String!): DeleteAppointmentState

  """Obtain JSON Web Token mutation"""
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
  revokeToken(input: RevokeInput!): RevokePayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  username: String!
  password: String!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebTokenPayload {
  token: String
  clientMutationId: String
}

"""Subscription triggers on a new appointment state."""
type OnAppointmentState {
  action: String
  appointmentStateNode: AppointmentStateNode
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The project root query definition"""
type Query {
  me: UserType
  users: [UserType]

  """The ID of the object"""
  relayUserInfo(id: ID!): UserInfoNode
  relayUserInfos(before: String, after: String, first: Int, last: Int, user: ID, user_Username: ID, user_Username_Contains: String, user_Username_Istartswith: String, user_FirstName: ID, user_FirstName_Contains: String, user_FirstName_Istartswith: String, user_LastName: ID, user_LastName_Contains: String, user_LastName_Istartswith: String, user_Email: ID, user_Email_Contains: String): UserInfoNodeConnection

  """The ID of the object"""
  relayAppointmentState(id: ID!): AppointmentStateNode
  relayAppointmentStates(before: String, after: String, first: Int, last: Int, name: String, appointments: [ID]): AppointmentStateNodeConnection

  """The ID of the object"""
  relayAppointment(id: ID!): AppointmentNode
  relayAppointments(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection
}

input RefreshInput {
  token: String!
  clientMutationId: String
}

type RefreshPayload {
  token: String
  payload: GenericScalar
  clientMutationId: String
}

input RevokeInput {
  refreshToken: String!
  clientMutationId: String
}

type RevokePayload {
  revoked: Int
  clientMutationId: String
}

"""The project root subscription definition"""
type Subscription {
  onAppointmentStateAction(action: String): OnAppointmentState
}

type UpdateAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

type UserInfoNode implements Node {
  """The ID of the object."""
  id: ID!
  user: UserType!
  isVip: Boolean!
  userManagedBy: UserType
}

type UserInfoNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserInfoNodeEdge]!
}

"""A Relay edge containing a `UserInfoNode` and its cursor."""
type UserInfoNodeEdge {
  """The item at the end of the edge"""
  node: UserInfoNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  userinfo: UserInfoNode
  manager(before: String, after: String, first: Int, last: Int, user: ID, user_Username: ID, user_Username_Contains: String, user_Username_Istartswith: String, user_FirstName: ID, user_FirstName_Contains: String, user_FirstName_Istartswith: String, user_LastName: ID, user_LastName_Contains: String, user_LastName_Istartswith: String, user_Email: ID, user_Email_Contains: String): UserInfoNodeConnection!
  appointmentSet(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection!
}

input VerifyInput {
  token: String!
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar
  clientMutationId: String
}

