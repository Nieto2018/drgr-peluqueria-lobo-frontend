enum AccountActionEnum {
  ACTIVATE_ACCOUNT
  UPDATE_EMAIL
  RESET_PASSWORD
}

type ActivateAccount {
  email: String
  result: String
  errors: [String]
}

type AppointmentNode implements Node {
  """The ID of the object."""
  id: ID!
  user: UserType!
  appointmentDate: DateTime!
  appointmentState: AppointmentStateNode!
}

type AppointmentNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AppointmentNodeEdge]!
}

"""A Relay edge containing a `AppointmentNode` and its cursor."""
type AppointmentNodeEdge {
  """The item at the end of the edge"""
  node: AppointmentNode

  """A cursor for use in pagination"""
  cursor: String!
}

enum AppointmentStateActionEnum {
  CREATE_APPOINTMENT_STATE
  UPDATE_APPOINTMENT_STATE
  DELETE_APPOINTMENT_STATE
}

type AppointmentStateNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  appointments(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection!
}

type AppointmentStateNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AppointmentStateNodeEdge]!
}

"""A Relay edge containing a `AppointmentStateNode` and its cursor."""
type AppointmentStateNodeEdge {
  """The item at the end of the edge"""
  node: AppointmentStateNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CreateAccount {
  email: String
  result: String
  errors: [String]
}

type CreateAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeactivateAccount {
  email: String
  result: String
  errors: [String]
}

type DeleteAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""The project root mutation definition"""
type Mutation {
  sendVerificationEmail(
    """Possible values: ACTIVATE_ACCOUNT, UPDATE_EMAIL or RESET_PASSWORD"""
    action: AccountActionEnum
    email: String
  ): SendVerificationEmail
  createAccount(input: UserInput): CreateAccount
  activateAccount(token: String): ActivateAccount
  deactivateAccount: DeactivateAccount
  updateEmail(token: String): UpdateEmail
  resetPassword(password1: String, password2: String, token: String): ResetPassword
  createAppointmentState(name: String!): CreateAppointmentState
  updateAppointmentState(id: String!, name: String!): UpdateAppointmentState
  deleteAppointmentState(id: String!): DeleteAppointmentState

  """Obtain JSON Web Token mutation"""
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  verifyToken(input: VerifyInput!): VerifyPayload
  refreshToken(input: RefreshInput!): RefreshPayload
  revokeToken(input: RevokeInput!): RevokePayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  email: String!
  password: String!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebTokenPayload {
  token: String
  clientMutationId: String
}

"""Subscription triggers on a new appointment state."""
type OnAppointmentState {
  action: String
  appointmentStateNode: AppointmentStateNode
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The project root query definition"""
type Query {
  me: UserType
  users: [UserType]

  """The ID of the object"""
  relayAppointmentState(id: ID!): AppointmentStateNode
  relayAppointmentStates(before: String, after: String, first: Int, last: Int, name: String, appointments: [ID]): AppointmentStateNodeConnection

  """The ID of the object"""
  relayAppointment(id: ID!): AppointmentNode
  relayAppointments(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection
}

input RefreshInput {
  token: String!
  clientMutationId: String
}

type RefreshPayload {
  token: String
  payload: GenericScalar
  clientMutationId: String
}

type ResetPassword {
  email: String
  result: String
  errors: [String]
}

input RevokeInput {
  refreshToken: String!
  clientMutationId: String
}

type RevokePayload {
  revoked: Int
  clientMutationId: String
}

type SendVerificationEmail {
  email: String
  action: String
  result: String
  errors: [String]
}

"""The project root subscription definition"""
type Subscription {
  onAppointmentStateAction(action: AppointmentStateActionEnum!): OnAppointmentState
}

type UpdateAppointmentState {
  appointmentStateNode: AppointmentStateNode
}

type UpdateEmail {
  oldEmail: String
  newEmail: String
  result: String
  errors: [String]
}

input UserInput {
  email: String
  password1: String
  password2: String
  name: String
  surnames: String
  phoneNumber: String
}

type UserType {
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!
  firstName: String!
  lastName: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  email: String!
  phoneNumber: String
  isVip: Boolean!
  lastToken: String
  isUsedLastToken: Boolean!
  appointmentSet(before: String, after: String, first: Int, last: Int, user: ID, appointmentDate: DateTime, appointmentState: ID): AppointmentNodeConnection!
}

input VerifyInput {
  token: String!
  clientMutationId: String
}

type VerifyPayload {
  payload: GenericScalar
  clientMutationId: String
}

